/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => QuickTemplatesPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  templates: [],
  useFileStorage: false,
  templatesFolder: "templates"
};
var QuickTemplatesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "save-selection-as-template",
      name: "Save selection as template",
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        if (selection) {
          new SaveTemplateModal(this.app, this, selection).open();
        } else {
          new import_obsidian.Notice("No text selected");
        }
      }
    });
    this.addCommand({
      id: "insert-template",
      name: "Insert template",
      editorCallback: (editor, view) => {
        new InsertTemplateModal(this.app, this, editor).open();
      }
    });
    this.addCommand({
      id: "manage-templates",
      name: "Manage templates",
      callback: () => {
        new ManageTemplatesModal(this.app, this).open();
      }
    });
    this.app.workspace.onLayoutReady(() => {
      this.registerTemplateCommands();
    });
    this.registerEditorSuggest(new TemplateSuggest(this));
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      menu.addItem((item) => {
        item.setTitle("Insert template").setIcon("template-glyph").onClick(() => {
          new InsertTemplateModal(this.app, this, editor).open();
        });
      });
      const selection = editor.getSelection();
      if (selection) {
        menu.addItem((item) => {
          item.setTitle("Save selection as template").setIcon("plus-with-circle").onClick(() => {
            new SaveTemplateModal(this.app, this, selection).open();
          });
        });
      }
    }));
    this.addSettingTab(new QuickTemplatesSettingTab(this.app, this));
    if (this.settings.useFileStorage) {
      this.ensureTemplatesFolderExists();
    }
  }
  onunload() {
    console.log("Unloading Quick Templates plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    if (this.settings.useFileStorage) {
      await this.loadTemplatesFromFiles();
    }
  }
  async saveSettings() {
    if (this.settings.useFileStorage) {
      await this.saveTemplatesToFiles();
      const settingsWithoutTemplates = {
        ...this.settings,
        templates: []
      };
      await this.saveData(settingsWithoutTemplates);
    } else {
      await this.saveData(this.settings);
    }
    if (this.app.workspace.layoutReady) {
      this.registerTemplateCommands();
    } else {
      this.app.workspace.onLayoutReady(() => {
        this.registerTemplateCommands();
      });
    }
  }
  registerTemplateCommands() {
    try {
      this.app.commands.listCommands().filter((cmd) => cmd.id.startsWith("quick-templates:template-")).forEach((cmd) => {
        this.app.commands.removeCommand(cmd.id);
      });
      this.settings.templates.forEach((template) => {
        if (!template)
          return;
        const commandText = template.name;
        if (!commandText)
          return;
        const commandId = `quick-templates:template-${this.createSafeId(commandText)}`;
        const commandName = `Template: ${template.name}`;
        try {
          this.addCommand({
            id: commandId,
            name: commandName,
            editorCallback: (editor) => {
              if (!editor)
                return;
              this.insertTemplateContent(editor, template.content);
            }
          });
        } catch (addError) {
          console.log(`Failed to add command ${commandId}:`, addError);
        }
      });
    } catch (error) {
      console.log("Error in registerTemplateCommands:", error);
    }
  }
  createSafeId(text) {
    return btoa(unescape(encodeURIComponent(text))).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
  }
  insertTemplateContent(editor, content, startPos, endPos) {
    if (!editor || !content) {
      console.log("Editor or content is null, cannot insert template");
      return;
    }
    try {
      if (startPos && endPos) {
        editor.replaceRange(content, startPos, endPos);
      } else {
        editor.replaceSelection(content);
      }
      try {
        const cursor = editor.getCursor();
        if (cursor) {
          editor.setCursor(cursor);
        }
      } catch (cursorError) {
        console.log("Error setting cursor after template insertion:", cursorError);
      }
    } catch (error) {
      console.log("Error inserting template content:", error);
      new import_obsidian.Notice("Failed to insert template. Please try again.");
    }
  }
  ensureTemplatesFolderExists() {
    const templatesPath = (0, import_obsidian.normalizePath)(this.settings.templatesFolder);
    try {
      const folderExists = this.app.vault.getAbstractFileByPath(templatesPath) !== null;
      if (!folderExists) {
        this.app.vault.createFolder(templatesPath).catch((error) => {
          console.error("Failed to create templates folder:", error);
          new import_obsidian.Notice("Failed to create templates folder. Reverting to JSON storage.");
          this.settings.useFileStorage = false;
        });
      }
    } catch (error) {
      console.error("Failed to create templates folder:", error);
      new import_obsidian.Notice("Failed to create templates folder. Reverting to JSON storage.");
      this.settings.useFileStorage = false;
    }
  }
  async loadTemplatesFromFiles() {
    var _a, _b, _c, _d;
    try {
      const templatesPath = (0, import_obsidian.normalizePath)(this.settings.templatesFolder);
      const folder = this.app.vault.getAbstractFileByPath(templatesPath);
      if (!folder) {
        return;
      }
      this.settings.templates = [];
      const files = this.app.vault.getFiles().filter((file) => file.path.startsWith(this.settings.templatesFolder + "/") && file.extension === "md");
      for (const file of files) {
        try {
          const content = await this.app.vault.read(file);
          const metaSection = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
          if (metaSection) {
            const metaContent = metaSection[1];
            const templateContent = metaSection[2].trim();
            const name = (_b = (_a = metaContent.match(/name:\s*(.*)/)) == null ? void 0 : _a[1]) == null ? void 0 : _b.trim();
            const useNameAsCommand = ((_d = (_c = metaContent.match(/useNameAsCommand:\s*(.*)/)) == null ? void 0 : _c[1]) == null ? void 0 : _d.trim()) === "true";
            if (name) {
              this.settings.templates.push({
                name,
                content: templateContent,
                useNameAsCommand
              });
            }
          }
        } catch (error) {
          console.error(`Failed to load template from file ${file.path}:`, error);
        }
      }
    } catch (error) {
      console.error("Failed to load templates from files:", error);
      new import_obsidian.Notice("Failed to load templates from files. Some templates may be missing.");
    }
  }
  async saveTemplatesToFiles() {
    try {
      const templatesPath = (0, import_obsidian.normalizePath)(this.settings.templatesFolder);
      const folder = this.app.vault.getAbstractFileByPath(templatesPath);
      if (!folder) {
        this.ensureTemplatesFolderExists();
      }
      const existingFiles = this.app.vault.getFiles().filter((file) => file.path.startsWith(this.settings.templatesFolder + "/") && file.extension === "md");
      const existingFileMap = new Map();
      existingFiles.forEach((file) => {
        const baseName = file.basename;
        existingFileMap.set(baseName, file);
      });
      for (const template of this.settings.templates) {
        const safeFileName = this.createSafeFileName(template.name);
        const filePath = (0, import_obsidian.normalizePath)(`${this.settings.templatesFolder}/${safeFileName}.md`);
        const metadata = [
          "---",
          `name: ${template.name}`,
          `useNameAsCommand: ${template.useNameAsCommand}`,
          "---",
          "",
          template.content
        ].join("\n");
        if (existingFileMap.has(safeFileName)) {
          await this.app.vault.modify(existingFileMap.get(safeFileName), metadata);
          existingFileMap.delete(safeFileName);
        } else {
          await this.app.vault.create(filePath, metadata);
        }
      }
      for (const [_, file] of existingFileMap.entries()) {
        await this.app.vault.delete(file);
      }
    } catch (error) {
      console.error("Failed to save templates to files:", error);
      new import_obsidian.Notice("Failed to save templates to files. Reverting to JSON storage.");
      this.settings.useFileStorage = false;
      await this.saveData(this.settings);
    }
  }
  createSafeFileName(name) {
    return name.replace(/[\\/:*?"<>|]/g, "_").replace(/\s+/g, "_").substring(0, 100);
  }
};
var SaveTemplateModal = class extends import_obsidian.Modal {
  constructor(app, plugin, templateContent) {
    super(app);
    this.plugin = plugin;
    this.templateContent = templateContent;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Save as Template" });
    new import_obsidian.Setting(contentEl).setName("Template name").setDesc("Enter a name for this template. The template will be available as a command with this name.").addText((text) => {
      this.templateNameInput = text.inputEl;
      text.setPlaceholder("Template name").setValue("").onChange((value) => {
      });
    });
    setTimeout(() => {
      const existingCustomCommandSetting = contentEl.querySelector(".custom-command-setting");
      if (existingCustomCommandSetting) {
        existingCustomCommandSetting.remove();
      }
    }, 0);
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Save").setCta().onClick(async () => {
        const templateName = this.templateNameInput.value.trim();
        if (!templateName) {
          new import_obsidian.Notice("Template name is required");
          return;
        }
        await this.saveTemplateToSettings(templateName, "", true);
      });
    }).addButton((button) => {
      button.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async saveTemplateToSettings(name, cmd, useNameAsCmd) {
    const existingTemplateIndex = this.plugin.settings.templates.findIndex((t) => t.name === name);
    if (existingTemplateIndex >= 0) {
      const confirmModal = new ConfirmModal(this.app, `Template "${name}" already exists. Overwrite?`, async (confirmed) => {
        if (confirmed) {
          this.plugin.settings.templates[existingTemplateIndex] = {
            name,
            content: this.templateContent,
            useNameAsCommand: true
          };
          await this.plugin.saveSettings();
          new import_obsidian.Notice(`Template "${name}" updated`);
          this.close();
        }
      }).open();
    } else {
      this.plugin.settings.templates.push({
        name,
        content: this.templateContent,
        useNameAsCommand: true
      });
      await this.plugin.saveSettings();
      new import_obsidian.Notice(`Template "${name}" saved`);
      this.close();
    }
  }
};
var InsertTemplateModal = class extends import_obsidian.Modal {
  constructor(app, plugin, editor) {
    super(app);
    this.plugin = plugin;
    this.editor = editor;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Insert Template" });
    if (this.plugin.settings.templates.length === 0) {
      contentEl.createEl("p", { text: "No templates found. Create a template first." });
      return;
    }
    const templateList = contentEl.createEl("div", { cls: "template-list" });
    templateList.style.maxHeight = "300px";
    templateList.style.overflow = "auto";
    templateList.style.margin = "10px 0";
    this.plugin.settings.templates.forEach((template) => {
      const templateItem = templateList.createEl("div", { cls: "template-item" });
      templateItem.style.padding = "8px";
      templateItem.style.borderBottom = "1px solid var(--background-modifier-border)";
      templateItem.style.cursor = "pointer";
      templateItem.style.display = "flex";
      templateItem.style.justifyContent = "space-between";
      templateItem.style.alignItems = "center";
      templateItem.setAttribute("aria-label", template.content.length > 100 ? template.content.substring(0, 100) + "..." : template.content);
      const nameEl = templateItem.createEl("div", { text: template.name });
      nameEl.style.fontWeight = "bold";
      const commandInfo = template.name;
      const commandEl = templateItem.createEl("div", { text: `!!${commandInfo}` });
      commandEl.style.color = "var(--text-muted)";
      commandEl.style.fontSize = "0.8em";
      templateItem.addEventListener("click", () => {
        this.plugin.insertTemplateContent(this.editor, template.content);
        this.close();
      });
      templateItem.addEventListener("mouseenter", () => {
        templateItem.style.backgroundColor = "var(--background-modifier-hover)";
        const tooltip = document.createElement("div");
        tooltip.classList.add("template-tooltip");
        tooltip.textContent = template.content.length > 100 ? template.content.substring(0, 100) + "..." : template.content;
        tooltip.style.position = "absolute";
        tooltip.style.zIndex = "1000";
        tooltip.style.backgroundColor = "var(--background-primary)";
        tooltip.style.border = "1px solid var(--background-modifier-border)";
        tooltip.style.borderRadius = "4px";
        tooltip.style.padding = "8px";
        tooltip.style.maxWidth = "300px";
        tooltip.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.1)";
        tooltip.style.fontSize = "0.9em";
        tooltip.style.whiteSpace = "pre-wrap";
        tooltip.style.wordBreak = "break-word";
        document.body.appendChild(tooltip);
        const rect = templateItem.getBoundingClientRect();
        tooltip.style.left = `${rect.right + 10}px`;
        tooltip.style.top = `${rect.top}px`;
        templateItem.dataset.tooltipId = Date.now().toString();
        tooltip.dataset.tooltipId = templateItem.dataset.tooltipId;
      });
      templateItem.addEventListener("mouseleave", () => {
        templateItem.style.backgroundColor = "";
        if (templateItem.dataset.tooltipId) {
          const tooltip = document.querySelector(`.template-tooltip[data-tooltip-id="${templateItem.dataset.tooltipId}"]`);
          if (tooltip) {
            tooltip.remove();
          }
        }
      });
    });
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    document.querySelectorAll(".template-tooltip").forEach((tooltip) => {
      tooltip.remove();
    });
  }
};
var ManageTemplatesModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Manage Templates" });
    if (this.plugin.settings.templates.length === 0) {
      contentEl.createEl("p", { text: "No templates found. Create a template first." });
      return;
    }
    const templateList = contentEl.createEl("div", { cls: "template-list" });
    templateList.style.maxHeight = "400px";
    templateList.style.overflow = "auto";
    templateList.style.margin = "10px 0";
    this.plugin.settings.templates.forEach((template, index) => {
      const templateItem = templateList.createEl("div", { cls: "template-item" });
      templateItem.style.padding = "10px";
      templateItem.style.borderBottom = "1px solid var(--background-modifier-border)";
      templateItem.style.display = "flex";
      templateItem.style.justifyContent = "space-between";
      templateItem.style.alignItems = "center";
      const infoEl = templateItem.createEl("div");
      infoEl.createEl("div", { text: template.name, cls: "template-name" }).style.fontWeight = "bold";
      const commandInfo = template.name;
      infoEl.createEl("div", { text: `Command: !!${commandInfo}`, cls: "template-command" }).style.color = "var(--text-muted)";
      const previewText = template.content.length > 50 ? template.content.substring(0, 50) + "..." : template.content;
      infoEl.createEl("div", { text: previewText, cls: "template-preview" }).style.color = "var(--text-muted)";
      infoEl.createEl("div", { cls: "template-preview" }).style.fontSize = "0.8em";
      const actionsEl = templateItem.createEl("div", { cls: "template-actions" });
      actionsEl.style.display = "flex";
      actionsEl.style.gap = "8px";
      const editBtn = actionsEl.createEl("button", { text: "\u{1F4DD}" });
      editBtn.style.cursor = "pointer";
      editBtn.addEventListener("click", () => {
        new EditTemplateModal(this.app, this.plugin, template, index, () => {
          this.close();
          new ManageTemplatesModal(this.app, this.plugin).open();
        }).open();
      });
      const deleteBtn = actionsEl.createEl("button", { text: "\u274C" });
      deleteBtn.style.cursor = "pointer";
      deleteBtn.addEventListener("click", () => {
        new ConfirmModal(this.app, `Delete template "${template.name}"?`, async (confirmed) => {
          if (confirmed) {
            this.plugin.settings.templates.splice(index, 1);
            await this.plugin.saveSettings();
            new import_obsidian.Notice(`Template "${template.name}" deleted`);
            this.close();
            new ManageTemplatesModal(this.app, this.plugin).open();
          }
        }).open();
      });
    });
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Close").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var EditTemplateModal = class extends import_obsidian.Modal {
  constructor(app, plugin, template, templateIndex, onSave) {
    super(app);
    this.plugin = plugin;
    this.template = template;
    this.templateIndex = templateIndex;
    this.onSave = onSave;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Edit Template" });
    new import_obsidian.Setting(contentEl).setName("Template name").setDesc("Enter a name for this template. The template will be available as a command with this name.").addText((text) => {
      this.nameInput = text.inputEl;
      text.setValue(this.template.name).onChange((value) => {
      });
    });
    new import_obsidian.Setting(contentEl).setName("Template content").setDesc("The content of the template").setClass("template-content-setting");
    this.contentTextarea = contentEl.createEl("textarea", {
      attr: {
        rows: "10",
        style: "width: 100%; font-family: monospace; margin-bottom: 1em;"
      }
    });
    this.contentTextarea.value = this.template.content;
    setTimeout(() => {
      const existingCustomCommandSetting = contentEl.querySelector(".custom-command-setting");
      if (existingCustomCommandSetting) {
        existingCustomCommandSetting.remove();
      }
    }, 0);
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Save").setCta().onClick(async () => {
        const templateName = this.nameInput.value.trim();
        if (!templateName) {
          new import_obsidian.Notice("Template name is required");
          return;
        }
        await this.saveTemplateToSettings(templateName, "", true);
      });
    }).addButton((button) => {
      button.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async saveTemplateToSettings(name, cmd, useNameAsCmd) {
    const existingTemplateIndex = this.plugin.settings.templates.findIndex((t, idx) => t.name === name && idx !== this.templateIndex);
    if (existingTemplateIndex >= 0) {
      new import_obsidian.Notice(`Template with name "${name}" already exists`);
      return;
    }
    this.plugin.settings.templates[this.templateIndex] = {
      name,
      content: this.contentTextarea.value,
      useNameAsCommand: true
    };
    await this.plugin.saveSettings();
    new import_obsidian.Notice(`Template "${name}" updated`);
    this.close();
    this.onSave();
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, message, onConfirm) {
    super(app);
    this.message = message;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Confirm" });
    contentEl.createEl("p", { text: this.message });
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Yes").setCta().onClick(() => {
        this.onConfirm(true);
        this.close();
      });
    }).addButton((button) => {
      button.setButtonText("No").onClick(() => {
        this.onConfirm(false);
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TemplateSuggest = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.isInserting = false;
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, file) {
    if (!cursor || !editor || !file) {
      return null;
    }
    if (this.isInserting)
      return null;
    try {
      const line = editor.getLine(cursor.line);
      if (!line)
        return null;
      const subString = line.substring(0, cursor.ch);
      const match = subString.match(/!!([^\s]*)$/u);
      if (!match)
        return null;
      return {
        start: {
          line: cursor.line,
          ch: subString.lastIndexOf("!!")
        },
        end: cursor,
        query: match[1]
      };
    } catch (error) {
      console.log("Error in TemplateSuggest.onTrigger:", error);
      return null;
    }
  }
  getSuggestions(context) {
    if (!context)
      return [];
    try {
      const query = context.query.toLowerCase();
      if (!query) {
        return this.plugin.settings.templates || [];
      }
      return (this.plugin.settings.templates || []).filter((template) => {
        if (!template)
          return false;
        const nameMatch = template.name.toLowerCase().includes(query);
        return nameMatch;
      });
    } catch (error) {
      console.log("Error in TemplateSuggest.getSuggestions:", error);
      return [];
    }
  }
  renderSuggestion(template, el) {
    if (!template || !el)
      return;
    try {
      el.createEl("div", { text: template.name, cls: "suggestion-title" });
      const commandInfo = template.name;
      el.createEl("div", { text: `!!${commandInfo}`, cls: "suggestion-note" });
      const previewText = template.content.length > 100 ? template.content.substring(0, 100) + "..." : template.content;
      el.createEl("div", { text: previewText, cls: "suggestion-content" });
    } catch (error) {
      console.log("Error in TemplateSuggest.renderSuggestion:", error);
    }
  }
  selectSuggestion(template, event) {
    if (!template)
      return;
    try {
      if (this.context && this.context.editor) {
        const editor = this.context.editor;
        const startPos = this.context.start;
        const endPos = this.context.end;
        if (!editor || !startPos || !endPos) {
          console.log("Missing editor or position information");
          return;
        }
        this.isInserting = true;
        editor.replaceRange(template.content, startPos, endPos);
        setTimeout(() => {
          this.isInserting = false;
        }, 100);
        this.close();
      }
    } catch (error) {
      console.log("Error in TemplateSuggest.selectSuggestion:", error);
      this.isInserting = false;
    }
  }
};
var QuickTemplatesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quick Templates Settings" });
    containerEl.createEl("h3", { text: "Storage Settings" });
    new import_obsidian.Setting(containerEl).setName("Use file-based storage").setDesc("Store templates as individual files in a templates folder instead of in settings.json").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.useFileStorage).onChange(async (value) => {
        this.plugin.settings.useFileStorage = value;
        const folderSetting = containerEl.querySelector(".templates-folder-setting");
        if (folderSetting) {
          folderSetting.style.display = value ? "flex" : "none";
        }
        await this.plugin.saveSettings();
      });
    });
    const templatesFolderSetting = new import_obsidian.Setting(containerEl).setName("Templates folder").setDesc("Folder where template files will be stored (relative to Obsidian config folder)").setClass("templates-folder-setting").addText((text) => {
      text.setValue(this.plugin.settings.templatesFolder).onChange(async (value) => {
        if (value.trim()) {
          this.plugin.settings.templatesFolder = value.trim();
          await this.plugin.saveSettings();
        }
      });
    }).addButton((button) => {
      button.setButtonText("Open Folder").setTooltip("Open templates folder in Obsidian").onClick(() => {
        const templatesPath = (0, import_obsidian.normalizePath)(this.plugin.settings.templatesFolder);
        const folder = this.app.vault.getAbstractFileByPath(templatesPath);
        if (folder) {
          this.app.workspace.getLeaf().openFile(folder);
        } else {
          this.plugin.ensureTemplatesFolderExists();
          new import_obsidian.Notice(`Templates folder created at: ${templatesPath}`);
        }
      });
    });
    if (this.plugin.settings.useFileStorage) {
      const templatesPath = (0, import_obsidian.normalizePath)(this.plugin.settings.templatesFolder);
      const pathInfo = containerEl.createEl("div", {
        cls: "templates-path-info",
        attr: {
          style: "margin-top: 8px; margin-bottom: 16px; font-size: 0.8em; color: var(--text-muted);"
        }
      });
      pathInfo.createEl("div", {
        text: "Templates folder location:",
        attr: {
          style: "margin-bottom: 4px;"
        }
      });
      pathInfo.createEl("code", {
        text: `${templatesPath} (relative to your vault root)`,
        attr: {
          style: "word-break: break-all; background-color: var(--background-secondary); padding: 4px 8px; border-radius: 4px;"
        }
      });
    }
    if (!this.plugin.settings.useFileStorage) {
      templatesFolderSetting.settingEl.style.display = "none";
    }
    containerEl.createEl("p", {
      text: 'Use the "Manage templates" command to create, edit, and delete templates.',
      attr: {
        style: "margin-bottom: 16px; font-style: italic; color: var(--text-accent);"
      }
    });
    const usageSection = containerEl.createEl("div", {
      cls: "usage-section",
      attr: {
        style: "background-color: var(--background-secondary); padding: 16px; border-radius: 8px; margin-bottom: 24px;"
      }
    });
    usageSection.createEl("h3", {
      text: "How to Use Quick Templates",
      attr: {
        style: "margin-top: 0; margin-bottom: 16px; color: var(--text-accent); border-bottom: 1px solid var(--background-modifier-border); padding-bottom: 8px;"
      }
    });
    const usageCards = usageSection.createEl("div", {
      cls: "usage-cards",
      attr: {
        style: "display: flex; flex-direction: column; gap: 16px;"
      }
    });
    const saveCard = usageCards.createEl("div", {
      cls: "usage-card",
      attr: {
        style: "background-color: var(--background-primary); padding: 16px; border-radius: 6px; border-left: 4px solid var(--interactive-accent);"
      }
    });
    saveCard.createEl("h4", {
      text: "\u{1F4DD} Save selection as template",
      attr: {
        style: "margin-top: 0; margin-bottom: 8px; color: var(--text-normal);"
      }
    });
    saveCard.createEl("p", {
      text: "Select text in your note and use:",
      attr: {
        style: "margin: 0 0 8px 0; color: var(--text-muted);"
      }
    });
    const saveSteps = saveCard.createEl("ul", {
      attr: {
        style: "margin: 0; padding-left: 24px;"
      }
    });
    saveSteps.createEl("li", {
      text: 'Command palette (Ctrl/Cmd+P) \u2192 "Save selection as template"',
      attr: {
        style: "margin-bottom: 4px;"
      }
    });
    saveSteps.createEl("li", {
      text: 'Right-click menu \u2192 "Save selection as template"'
    });
    const insertCard = usageCards.createEl("div", {
      cls: "usage-card",
      attr: {
        style: "background-color: var(--background-primary); padding: 16px; border-radius: 6px; border-left: 4px solid var(--interactive-accent);"
      }
    });
    insertCard.createEl("h4", {
      text: "\u{1F4CB} Insert template",
      attr: {
        style: "margin-top: 0; margin-bottom: 8px; color: var(--text-normal);"
      }
    });
    insertCard.createEl("p", {
      text: "Insert your saved templates using:",
      attr: {
        style: "margin: 0 0 8px 0; color: var(--text-muted);"
      }
    });
    const insertSteps = insertCard.createEl("ul", {
      attr: {
        style: "margin: 0; padding-left: 24px;"
      }
    });
    insertSteps.createEl("li", {
      text: 'Command palette \u2192 "Insert template"',
      attr: {
        style: "margin-bottom: 4px;"
      }
    });
    insertSteps.createEl("li", {
      text: 'Right-click menu \u2192 "Insert template"',
      attr: {
        style: "margin-bottom: 4px;"
      }
    });
    insertSteps.createEl("li", {
      text: "Type !! followed by your template name (autocomplete will appear)"
    });
    const manageCard = usageCards.createEl("div", {
      cls: "usage-card",
      attr: {
        style: "background-color: var(--background-primary); padding: 16px; border-radius: 6px; border-left: 4px solid var(--interactive-accent);"
      }
    });
    manageCard.createEl("h4", {
      text: "\u2699\uFE0F Manage templates",
      attr: {
        style: "margin-top: 0; margin-bottom: 8px; color: var(--text-normal);"
      }
    });
    manageCard.createEl("p", {
      text: "Edit or delete your templates:",
      attr: {
        style: "margin: 0 0 8px 0; color: var(--text-muted);"
      }
    });
    const manageSteps = manageCard.createEl("ul", {
      attr: {
        style: "margin: 0; padding-left: 24px;"
      }
    });
    manageSteps.createEl("li", {
      text: 'Command palette \u2192 "Manage templates"'
    });
    const quickAccessButton = usageSection.createEl("button", {
      text: "\u{1F680} Open Template Manager",
      cls: "mod-cta",
      attr: {
        style: "margin-top: 16px; width: 100%;"
      }
    });
    quickAccessButton.addEventListener("click", () => {
      new ManageTemplatesModal(this.app, this.plugin).open();
    });
    if (this.plugin.settings.templates.length > 0) {
      containerEl.createEl("h3", { text: "Your Templates" });
      const templateCount = containerEl.createEl("p", {
        text: `You have ${this.plugin.settings.templates.length} template(s)`
      });
      const manageButton = containerEl.createEl("button", {
        text: "Manage Templates",
        cls: "mod-cta"
      });
      manageButton.addEventListener("click", () => {
        new ManageTemplatesModal(this.app, this.plugin).open();
      });
    }
  }
};
